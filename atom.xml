<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-23T14:41:32.833Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>排序算法总结（内含python实现）</title>
    <link href="http://example.com/2022/04/23/algorithm-sort/"/>
    <id>http://example.com/2022/04/23/algorithm-sort/</id>
    <published>2022-04-23T12:36:33.000Z</published>
    <updated>2022-04-23T14:41:32.833Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结了常用的四大类别的算法：插入排序（直接插入排序，希尔排序）、交换排序（冒泡排序，快速排序）、选择排序（直接选择排序，堆排序）、归并排序，并用python实现。</p><blockquote><p>注：其中一些排序算法可稳定，也可不稳定，关键在于在处理相同的元素时，跳过还是依次遍历。<br>注：下列代码实现为升序排序。</p></blockquote><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><h4 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从左往右遍历，依次将当前元素插入到前面已经有序的序列中</span></span><br><span class="line"><span class="comment"># 稳定</span></span><br><span class="line"><span class="comment"># 时间复杂度： O(n^2)</span></span><br><span class="line"><span class="comment"># 空间复杂度： O(1)</span></span><br><span class="line"><span class="comment"># 改进：可使用二分法插入排序（暂略）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">insert_sort</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; list:</span></span><br><span class="line">    <span class="comment"># 从左往右开始遍历</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums)):</span><br><span class="line">        index = i</span><br><span class="line">        temp = nums[i]</span><br><span class="line">        <span class="keyword">while</span> index &gt; <span class="number">0</span> <span class="keyword">and</span> nums[index - <span class="number">1</span>] &gt; temp:</span><br><span class="line">            <span class="comment"># 若当前元素较小，则将有序的序列向后移</span></span><br><span class="line">            nums[index] = nums[index - <span class="number">1</span>]</span><br><span class="line">            index -= <span class="number">1</span></span><br><span class="line">        <span class="comment"># 找到正确的位置，赋值</span></span><br><span class="line">        nums[index] = temp</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">55</span>, <span class="number">64</span>, <span class="number">25</span>]</span><br><span class="line">print(insert_sort(nums))</span><br></pre></td></tr></table></figure><h4 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在直接插入的基础上， 分组（间隔为n的为一组，这里初始值设置为数据的一半）依次插入，然后将n缩小一半，依次插入，如此迭代，直至 n 为 0</span></span><br><span class="line"><span class="comment"># 这样做的好处在于，避免直接插入时，若元素为逆序，需要过多次的插入和元素移动操作</span></span><br><span class="line"><span class="comment"># 不稳定</span></span><br><span class="line"><span class="comment"># 时间复杂度： </span></span><br><span class="line"><span class="comment"># 空间复杂度： O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shell_sort</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; list:</span></span><br><span class="line">    <span class="comment"># 初始分组设置为数组的一半</span></span><br><span class="line">    group = <span class="number">2</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    gap = n // group</span><br><span class="line">    <span class="keyword">while</span> gap &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(gap, n):</span><br><span class="line">            temp = nums[i]</span><br><span class="line">            j = i</span><br><span class="line">            <span class="comment"># 从右往左，依次插入</span></span><br><span class="line">            <span class="keyword">while</span> j &gt;= gap <span class="keyword">and</span> nums[j - gap] &gt; temp:</span><br><span class="line">                nums[j] = nums[j - gap]</span><br><span class="line">                j -= gap</span><br><span class="line">            nums[j] = temp</span><br><span class="line">        <span class="comment"># 分组长度减半</span></span><br><span class="line">        gap //= group</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">55</span>, <span class="number">64</span>, <span class="number">25</span>]</span><br><span class="line">print(shell_sort(nums))</span><br></pre></td></tr></table></figure><h2 id="交换排序"><a href="#交换排序" class="headerlink" title="交换排序"></a>交换排序</h2><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 相邻两进行比较，每一轮将最大值移到最后</span></span><br><span class="line"><span class="comment"># 不稳定</span></span><br><span class="line"><span class="comment"># 时间复杂度： O(n^2)</span></span><br><span class="line"><span class="comment"># 空间复杂度： O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bubble_sort</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; list:</span></span><br><span class="line">    <span class="comment"># 每轮迭代，将最大值移到最后，故待排序序列长度减一</span></span><br><span class="line">    <span class="keyword">for</span> end <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums) - <span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 从左往右依次两两比较，将较大值移到后面</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, end):</span><br><span class="line">            <span class="keyword">if</span> nums[i - <span class="number">1</span>] &gt; nums[i]:</span><br><span class="line">                nums[i - <span class="number">1</span>], nums[i] = nums[i], nums[i - <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">55</span>, <span class="number">64</span>, <span class="number">25</span>]</span><br><span class="line">print(bubble_sort(nums))</span><br></pre></td></tr></table></figure><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择一个值，将比它大的移动右边，比它小的移到左边,故该值的位置已经找到；然后分别在左边和右边的序列中，继续选择一个值、划分，直至划分的序列中只有一个值</span></span><br><span class="line"><span class="comment"># 稳定</span></span><br><span class="line"><span class="comment"># 时间复杂度： O(nlogn)</span></span><br><span class="line"><span class="comment"># 空间复杂度： O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出选择的值的位置</span></span><br><span class="line"><span class="comment"># 这里默认取序列第一个元素，来划分左右序列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partition</span>(<span class="params">nums: <span class="built_in">list</span>, left: <span class="built_in">int</span>, right: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">    targt = nums[left]</span><br><span class="line">    mid, fast = left, right</span><br><span class="line">    <span class="keyword">while</span> mid != fast:</span><br><span class="line">        <span class="keyword">if</span> nums[fast] &gt; targt <span class="keyword">and</span> fast &gt; mid:</span><br><span class="line">            fast -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> nums[fast] &lt; targt <span class="keyword">and</span> fast &lt; mid:</span><br><span class="line">            fast += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            nums[fast], nums[mid] = nums[mid], nums[fast]</span><br><span class="line">            mid, fast = fast, mid</span><br><span class="line">            <span class="keyword">if</span> fast &gt;= mid:</span><br><span class="line">                fast -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> fast &lt; mid:</span><br><span class="line">                fast += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> mid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归实现： 划分左右序列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">nums, left, right</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> nums: <span class="keyword">return</span> nums</span><br><span class="line">    mid = partition(nums, left, right)</span><br><span class="line">    <span class="keyword">if</span> left &lt; mid - <span class="number">1</span>: quick_sort(nums, left, mid - <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> right &gt; mid + <span class="number">1</span>: quick_sort(nums, mid + <span class="number">1</span>, right)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">55</span>, <span class="number">64</span>, <span class="number">25</span>]</span><br><span class="line">print(quick_sort(<span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>, nums))</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><h4 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确定最小值或最大值的位置，最后才交换</span></span><br><span class="line"><span class="comment"># 稳定</span></span><br><span class="line"><span class="comment"># 时间复杂度： O(n^2)</span></span><br><span class="line"><span class="comment"># 空间复杂度： O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_sort</span>(<span class="params">nums: <span class="built_in">list</span></span>) -&gt; list:</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="comment"># 从左往右依次遍历</span></span><br><span class="line">    <span class="keyword">for</span> start <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>):</span><br><span class="line">        index = start</span><br><span class="line">        <span class="comment"># 确定比当前元素小的元素的位置</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start + <span class="number">1</span>, n):</span><br><span class="line">            <span class="keyword">if</span> nums[index] &gt; nums[i]:</span><br><span class="line">                index = i</span><br><span class="line">        <span class="comment"># 赋值</span></span><br><span class="line">        nums[start], nums[index] = nums[index], nums[start]</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">55</span>, <span class="number">64</span>, <span class="number">25</span>]</span><br><span class="line">print(select_sort(nums))    </span><br></pre></td></tr></table></figure><h4 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从下往上，从左往右，创建最大堆</span></span><br><span class="line"><span class="comment"># 最大堆特征：父亲节点比其左右子树的节点的值都大</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 时间复杂度： </span></span><br><span class="line"><span class="comment"># 空间复杂度： O(1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建堆</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bulid_heap</span>(<span class="params">nums: <span class="built_in">list</span>, head: <span class="built_in">int</span>, end: <span class="built_in">int</span></span>) -&gt; list:</span></span><br><span class="line">    larget = head</span><br><span class="line">    <span class="comment"># 当前节点的左孩子</span></span><br><span class="line">    left = <span class="number">2</span> * head + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 当前节点的右孩子</span></span><br><span class="line">    right = <span class="number">2</span> * head + <span class="number">2</span></span><br><span class="line">    <span class="comment"># 找到左右孩子中，比父亲节点大的节点的位置</span></span><br><span class="line">    <span class="keyword">if</span> left &lt; end <span class="keyword">and</span> nums[left] &gt; nums[larget]:</span><br><span class="line">        larget = left</span><br><span class="line">    <span class="keyword">if</span> right &lt; end <span class="keyword">and</span> nums[right] &gt; nums[larget]:</span><br><span class="line">        larget = right</span><br><span class="line">    <span class="comment"># 若孩子节点比父亲节点的值大，则交换</span></span><br><span class="line">    <span class="keyword">if</span> larget != head:</span><br><span class="line">        nums[larget], nums[head] = nums[head], nums[larget]</span><br><span class="line">        <span class="comment"># 被交换的孩子节点作为父节点，继续向其孩子节点遍历</span></span><br><span class="line">        bulid_heap(nums, larget, end)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"><span class="comment"># 堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heap_sort</span>(<span class="params">nums</span>):</span></span><br><span class="line">    n = <span class="built_in">len</span>(nums)</span><br><span class="line">    <span class="comment"># 创建堆，从右往左依次插入节点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        bulid_heap(nums, i, n)</span><br><span class="line">    <span class="comment"># 排序，将最大值和末尾节点进行交换，然后将末尾节点之前的序列继续构建最大堆；如此遍历</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n - <span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">        nums[<span class="number">0</span>], nums[j] = nums[j], nums[<span class="number">0</span>]</span><br><span class="line">        bulid_heap(nums, <span class="number">0</span>, j)</span><br><span class="line">    <span class="keyword">return</span> nums</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">55</span>, <span class="number">64</span>, <span class="number">25</span>]</span><br><span class="line">print(heap_sort(nums)) </span><br></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分治的思想</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># 时间复杂度： </span></span><br><span class="line"><span class="comment"># 空间复杂度： O(n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将两个有序的序列，依次从左往右比较，将较小的值插入新的序列，最后合成一个有序的序列</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge</span>(<span class="params">nums, left, mid, right</span>):</span></span><br><span class="line">    numsa = nums[left:mid + <span class="number">1</span>]</span><br><span class="line">    numsb = nums[mid + <span class="number">1</span>: right + <span class="number">1</span>]</span><br><span class="line">    result = <span class="built_in">list</span>()</span><br><span class="line">    p, q = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">    <span class="comment"># 两数组分别开始比较</span></span><br><span class="line">    <span class="keyword">while</span> p &lt; <span class="built_in">len</span>(numsa) <span class="keyword">and</span> q &lt; <span class="built_in">len</span>(numsb):</span><br><span class="line">        <span class="keyword">if</span> numsa[p] &gt;= numsb[q]:</span><br><span class="line">            result.append(numsb[q])</span><br><span class="line">            q += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result.append(numsa[p])</span><br><span class="line">            p += <span class="number">1</span></span><br><span class="line">    <span class="comment">#若其中一个数组还有值，则追加后末尾</span></span><br><span class="line">    result.extend(numsa[p:])</span><br><span class="line">    result.extend(numsb[q:])</span><br><span class="line">    nums[left:right + <span class="number">1</span>] = result</span><br><span class="line"></span><br><span class="line"><span class="comment"># 递归拆分</span></span><br><span class="line"><span class="comment"># 没有返回值，传入数组，默认在此词数组上移动排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_sort</span>(<span class="params">nums: <span class="built_in">list</span>, start: <span class="built_in">int</span>, end: <span class="built_in">int</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> start &lt; end:</span><br><span class="line">        <span class="comment"># 默认是对半拆分</span></span><br><span class="line">        mid = (start + end) // <span class="number">2</span></span><br><span class="line">        merge_sort(nums, start, mid)</span><br><span class="line">        merge_sort(nums, mid + <span class="number">1</span>, end)</span><br><span class="line">        merge(nums, start, mid, end)</span><br><span class="line"></span><br><span class="line">nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">55</span>, <span class="number">64</span>, <span class="number">25</span>]</span><br><span class="line">merge_sort(nums, <span class="number">0</span>, <span class="built_in">len</span>(nums) - <span class="number">1</span>)</span><br><span class="line">print(nums)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文总结了常用的四大类别的算法：插入排序（直接插入排序，希尔排序）、交换排序（冒泡排序，快速排序）、选择排序（直接选择排序，堆排序）、归并排序，并用python实现。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：其中一些排序算法可稳定，也可不稳定，关键在于在处理相同的元素时</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="sort algorithm python" scheme="http://example.com/tags/sort-algorithm-python/"/>
    
  </entry>
  
  <entry>
    <title>数据科学家养成计划手册(持续更新中)</title>
    <link href="http://example.com/2021/01/02/data-science/"/>
    <id>http://example.com/2021/01/02/data-science/</id>
    <published>2021-01-02T05:58:55.000Z</published>
    <updated>2022-04-23T14:46:00.434Z</updated>
    
    <content type="html"><![CDATA[<p>本人是一名数据爱好者，梦想是成为一名数据科学家。这里记录我从零开始的学习过程。内容若有什么不对的，欢迎大家批评指正，也希望能和感兴趣的读者一起探讨。</p><blockquote><p>注1：数据科学家有两条发展路径，一条是偏向业务可视化的商业分析师（数据分析师），一条是偏向于建模算法的数据挖掘工程师。这里不予严格区分。本文旨在展示数据获取、处理、建模、分析、可视化等全过程。读者可根据自己的喜好选择一个方向深入。</p></blockquote><blockquote><p>注2：本文长期维护</p></blockquote><h2 id="数据分析全貌"><a href="#数据分析全貌" class="headerlink" title="数据分析全貌"></a>数据分析全貌</h2><p>数据分析是一门利用统计学知识，从数据中提取有用信息，进行总结和概括的学科。</p><p>一名优秀的数据分析师应该具备的能力：<code>好奇</code>、<code>谨慎</code>、<code>责任</code>。</p><p>在实际的工作中，每个分析师应该有自己处理问题的工作流程，并在实际的工作中不断的完善和迭代。最基本的流程如下所示：<br><code>数据工作流</code>：抛出问题 -&gt; 获取数据 -&gt; 数据研究 -&gt; 问题结论 -&gt; 解决办法</p><p><code>数据建模和挖掘具体流程</code>：数据获取 -&gt; 探索性分析及可视化 -&gt; 数据预处理 -&gt; 数据挖掘建模 -&gt; 模型评估</p><p>前两个流程（数据获取、探索性分析与可视化）也是狭义的数据分析。</p><p><code>前修知识</code>：数学(高数、概率论与数理统计)、统计学、python(或者 R)；（sql、excel 本文暂不探讨）</p><p>涉及的python第三方库：</p><ul><li>数据科学包：Numpy(数据基础包)、Pnadas(数据处理神器)、Scipy(科学计算包)、Matplotlib(可视化)、Seaborn(可视化)</li><li>机器学习包：Scikit-learn(传统机器学习)、TensorFlow(深度学习)</li></ul><p><code>工具</code>：Visual Studio Code(Jupyter插件)</p><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><h3 id="数据仓库"><a href="#数据仓库" class="headerlink" title="数据仓库"></a>数据仓库</h3><p><code>定义</code>：将所有的业务数据汇总处理，构成数据仓库(DW)</p><ul><li>全面、完备、尽可能详细的记录全部事实<ul><li>如某人几分几秒浏览了什么页面</li></ul></li><li>方便对部分维度和数据的整理(数据集市-DM)</li></ul><p><code>数据仓库与文件和日志的区别</code>：文件、日志只能顺序记录，不方便查找、比较、抽取特征等操作</p><p><code>数据仓库与数据库的区别</code>：</p><ul><li>数据仓库：<ul><li>面向主题存储<ul><li>主题：较高层次上对分析对象数据的一个完整并且一致的描述</li><li>如购买图书这个行为就是个主题，在几时几分几秒以什么样的价格购买了什么样的书就是这个购买主题的一个记录，记录里有时间有用户信息，有图书信息等各个维度的信息。主题就是各个数据相互联系的描述。</li></ul></li><li>针对分析(OLAP)</li><li>可能冗余、相对变化较大、数据量大</li></ul></li><li>数据库<ul><li>面向业务存储<ul><li>高并发、快速读写、数据结构精简</li></ul></li><li>针对应用(OLTP)<ul><li>为用户提供数据上的支持和服务</li></ul></li><li>组织规范</li></ul></li></ul><h3 id="检测与抓取-爬虫"><a href="#检测与抓取-爬虫" class="headerlink" title="检测与抓取(爬虫)"></a>检测与抓取(爬虫)</h3><p><code>检测</code>：用检测设备和检测算法直接获取数据。如传感器网络</p><p><code>抓取(爬虫)</code>：直接通过获取网页内容进行解析和分析，直接解析网页、接口和文件的信息。</p><ul><li>python常用库：<ul><li>抓取：urllib、urllib2、requests、scrap</li><li>渲染：PhantomJS</li><li>解析：beautifulSoup、Xpath(lxml)</li></ul></li></ul><h3 id="填写、日志、埋点"><a href="#填写、日志、埋点" class="headerlink" title="填写、日志、埋点"></a>填写、日志、埋点</h3><p><code>用户填写</code>：用户填写的信息。如调查问卷、用户注册时填写的信息</p><p><code>操作日志</code>：以文件形式记录。</p><ul><li>前端日志：网页和APP中记录的日志</li><li>后端日志：服务器的日志</li></ul><p><code>埋点</code>：在APP或网页应用中针对特定的流程收集一定的信息，用来跟踪APP或网页被使用的情况，以便后继用来进一步优化产品或进行运营支持。</p><ul><li>比较常用的记录项：访问、访客、停留时间、页面查看和跳出率。</li><li>分为页面统计和统计操作行为。</li><li>可自己开发也可选择第三方工具，如友盟。</li></ul><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p><code>计算</code>：通过已有的数据计算生成衍生数据。如企业的投入产出比</p><h3 id="数据学习网站"><a href="#数据学习网站" class="headerlink" title="数据学习网站"></a>数据学习网站</h3><p><code>数据竞赛网站</code>：kaggle &amp; 天池<br><code>图片数据集网站</code>：ImageNet、Open Images<br><code>各领域统计数据</code>：统计局、政府机构、公司财报等</p><h2 id="探索性分析与数据可视化"><a href="#探索性分析与数据可视化" class="headerlink" title="探索性分析与数据可视化"></a>探索性分析与数据可视化</h2><h3 id="统计分析方法基础"><a href="#统计分析方法基础" class="headerlink" title="统计分析方法基础"></a>统计分析方法基础</h3><p><code>集中趋势</code>：均值、中位数与分位数、众数<br>四分位数的计算方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># n为数据的个数  </span><br><span class="line">Q1位置 &#x3D; (n+1)*25  </span><br><span class="line">Q2位置 &#x3D; (n+1)*5  </span><br><span class="line">Q3位置 &#x3D; (n+1)*75</span><br></pre></td></tr></table></figure><p><code>离中趋势</code>：标准差、方差</p><p><code>数据分布</code>：偏态与峰态、正态分布与三大分布</p><ul><li>偏态系数：数据平均值偏离状态的一种衡量</li><li>峰态系数：数据分布集中强度的衡量</li><li>分布概率<ul><li>正态分布</li><li>卡方分布: 标准正态分布的平方和</li><li>$T$分布：用于根据小样本来估计呈正态分布且方差未知的总体的均值</li><li>$F$分布</li></ul></li></ul><p><code>抽样理论</code></p><ul><li>抽样原因：<ul><li>数据量异常大，全量计算的时间、成本都很大。(大数据发展，不再是问题)</li><li>全量检测不现实。比如测灯泡的寿命</li></ul></li><li>抽样类型：<ul><li>重复抽样(有放回的抽样)</li><li>不重复抽样(无放回的抽样)</li></ul></li><li>抽样方式<ul><li>完全随机抽样</li><li>等差距抽样：某个属性从低到高排列，等间距抽样</li><li>分类的分层抽样：根据各个类别的比例抽样</li></ul></li><li>抽样平均误差计算公式<ul><li>重复抽样</li><li>不重复抽样</li></ul></li><li>估计总体时抽样数量的确定<ul><li>重复抽样</li><li>不重复抽样</li></ul></li></ul><p><code>数据分类</code></p><ul><li>定类(类别)：根据事物离散、无差别属性进行分类。如性别、名族</li><li>定序(顺序)：可以界定数据的大小、但不能测定差值。如收入的高、中、低</li><li>定距(间距)：可以界定数据大小同时可测定差距，但无绝对零点(乘除比率无意义)。如温度</li><li>定比(比率)：可以界定数据大小同时可测定差距，有绝对零点。如身高、体重</li></ul><p><code>假设检验与方差检验</code><br>假设检验：做出一个假设，根据数据或已知的分布性质来推断这个假设成立的概率有多大。</p><ul><li>建立原假设 H0 (包含等号)，H1是H0的反命题，也称备择假设</li><li>选择检验统计量</li><li>根据显著性水平(一般为0.05)，确定拒绝域</li><li>计算<code>P值</code>或<code>样本统计量</code>，做出判断</li></ul><p>检验统计量：</p><ul><li>$\mu$ 分布</li><li>卡方分布：用于检测两个因素之间有无强联系</li><li>$T$检验：比较两组样本分布是否一致；两组值的均值有无较大差异</li><li>$F$检验（方差检验)：用于方差分析。多样本两两之间是否有差异。<ul><li>总变差平方和</li><li>平均平方和/组内平方和</li><li>残差平方和/组内平方差</li><li>统计量</li></ul></li></ul><blockquote><p>注：也可以通过qq图来判断一个分布是否符合一个已知的分布，比如找到该分布的分位数做纵轴，正态分布的分位数做横轴，若连线接近角平分线，则符合</p></blockquote><p><code>相关系数</code>：衡量两组数据或两组样本的分布趋势、变化趋势一致性程度的因子。</p><ul><li>皮尔逊(Pearson)相关系数</li><li>斯皮尔(Spearman)曼相关系数</li></ul><p><code>回归：线性回归</code>：确定两种或两种以上变量间相互依赖的定量关系的一种统计分析方法</p><ul><li>关键度量指标：<ul><li>一元决定系数</li><li>多元决定系数</li></ul></li><li>残差不相关(DW检验)</li></ul><p><code>PCA与奇异值分解</code>：尽可能少的失真情况下，线性降维，成分提取</p><ul><li><p>主成分分析法(PCA)</p><ul><li>求特征协方差矩阵</li><li>求协方差矩阵的特征值和特征向量</li><li>将特征值按照从大到小的顺序排序，选取其中最大的k个</li><li>将样本点投影到选取的特征向量上</li></ul></li><li><p>奇异值分解(SVD)</p><ul><li>特征矩阵 A 分解为 m_m 的酉阵，m_n 半正定矩阵(奇异矩阵)，n*n 酉阵转置 v</li></ul></li></ul><h3 id="探索性分析"><a href="#探索性分析" class="headerlink" title="探索性分析"></a>探索性分析</h3><h4 id="单因子探索"><a href="#单因子探索" class="headerlink" title="单因子探索"></a>单因子探索</h4><p>——展现数据全貌</p><ul><li>异常值分析(可用箱线图展示)<ul><li>连续异常值<ul><li>处理办法：舍去；异常值用边界值代替(四分位数)</li></ul></li><li>离散异常值：离散属性定义范围外的所有值均为异常值。如空值；收入离散成高、中、低之外的值<ul><li>处理办法：舍去；把所有异常值当作单独的一个值处理</li></ul></li><li>常识异常值：在限定知识和常识范围外的所有值均为异常值。如身高20m</li></ul></li><li>对比分析<ul><li>比什么：<ul><li>绝对数比较：数值直接比较。如比较收入、身高</li><li>相对数比较：把几个有联系的指标联合成新的指标<ul><li>结构相对数：部分与整体。如合格率、通过率</li><li>比例相对数：总体内用不同部分的数值进行比较。如三大产业相互比较</li><li>比较相对数：同一时空下相似或同质的指标进行比较。如不同时期同一产品的价格对比；不同互联网电商公司的待遇水平对比</li><li>动态相对数：一般包含时间概念。如用户增速</li><li>强度相对数：性质不同但又互相联系的属性进行联合。如人均、亩产、密度</li></ul></li></ul></li><li>怎么比：<ul><li>时间<ul><li>同比：今年2月同去年2月比</li><li>环比：今年2月同今年1月比</li></ul></li><li>空间<ul><li>现实方位：如不同国家、不同城市</li><li>逻辑上空间：如一家公司的不同部门；不同家公司之间的比较</li></ul></li><li>经验和计划：如历史上失业率达到百分之几回发生暴乱，把国家的失业率与之比较；工作排期与实际进度之间的比较</li></ul></li></ul></li><li>结构分析：各组成部分的分布与规律<ul><li>静态：直接分析总体的组成。如十一五时间三大产业的比例</li><li>动态：时间为轴分析结构变化的趋势。如十一五期间三大产业比的变化</li></ul></li><li>分布分析：数据分布频率的显示分析<ul><li>直接获取的概率分布</li><li>判断是否为正态分布<ul><li>偏态系数</li><li>峰态系数</li></ul></li><li>极大似然</li></ul></li></ul><h4 id="多因子探索"><a href="#多因子探索" class="headerlink" title="多因子探索"></a>多因子探索</h4><p>——探索属性与属性之间的联系</p><ul><li>交叉分析<ul><li>热力图</li><li>透视表</li></ul></li><li>分组与钻取</li><li>相关分析</li><li>因子分析</li><li>聚类分析(建模中也会用到)</li><li>回归分析(建模中也会用到)</li></ul><h3 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h3><ul><li>柱状图：横坐标表示离散值</li><li>直方图：横坐标表示范围</li><li>箱线图</li><li>折线图</li><li>饼图</li></ul><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="缺失值、离群值"><a href="#缺失值、离群值" class="headerlink" title="缺失值、离群值"></a>缺失值、离群值</h3><p><code>缺失值</code>：</p><ul><li>删除：缺失样本非常大(&gt;75%)，则删除整条数据</li><li>填充：缺失量&lt;10%<ul><li>若为正态分布，取均值</li><li>若为偏态，取中位数</li></ul></li><li>预测样本值：使用与缺失值相比相关性非常高的特征建立模型，预测缺失值</li></ul><p><code>离群点</code>：远离数据主要部分的样本(极大值或极小值)</p><ul><li>同单因子探索分析的异常值处理相同：删除或填充</li></ul><h3 id="标准化、纠偏"><a href="#标准化、纠偏" class="headerlink" title="标准化、纠偏"></a>标准化、纠偏</h3><p><code>标准化</code>：去除数量纲(单位)的影响，提高模型的解释度，加快模型的收敛速度。具体方法如下：</p><ul><li>中心化：减去均再除以标准差(之后均值为0，标准差为1)</li><li>01标准化：减去最小值再除以最大值和最小值的差</li></ul><p><code>纠偏</code></p><ul><li>正态分布：数据呈现对称的钟态分布</li><li>右偏态：样本大量集中在均值的左边(均值偏到了右边)</li><li>左偏态：样本大量集中在均值的右边(均值偏到了左边)</li><li>处理方法：<ul><li>右偏态：常用对数函数处理</li><li>左偏态：常用指数函数处理</li></ul></li><li>通用变换方法：以降低数据的偏态系数为目的，使得数据分布更加接近正态分布的变换方法。<ul><li>yeo-johnson 变换：可以处理包含正数、负数和零的变量</li><li>box-cox 变换：只能处理数值皆为正的变量</li></ul></li></ul><h3 id="特征工程：共线性、将维、扩展"><a href="#特征工程：共线性、将维、扩展" class="headerlink" title="特征工程：共线性、将维、扩展"></a>特征工程：共线性、将维、扩展</h3><p><code>共线性</code></p><ul><li>特征间共线性：两个或多个特征包含了相似的信息，相互之间存在强烈的相关关系。</li><li>常用的判断标准：两个或两个以上的特征之间的相关系数高于0.8</li><li>共线性的影响：降低运算效率；降低一些模型的稳定性；弱化一些模型的预测能力</li><li>处理办法：<ul><li>删除：一组相互共线的特征中只保留与因变量相关性最高的一个</li><li>变换：对共线的两列特征进行求比值、求差值等计算</li></ul></li></ul><h3 id="特征工程"><a href="#特征工程" class="headerlink" title="特征工程"></a>特征工程</h3><p><code>数据降维和特征提取</code><br>目的：降低不相关特征对模型准确性的干扰，降低模型的复杂度，提高模型的泛化能力，减少模型特征，提高模型训练和预测数据<br>处理办法：</p><ul><li>基于数据的理解，直接删除</li><li>使用主成分分析法(PCA)对特征进行提取</li><li>使用机器学习模型对特征进行筛选</li></ul><p><code>特征扩展</code><br>目的：解决模型欠拟合，捕捉自变量和因变量之间的非线性关系<br>常用方法：多项式扩展。举例如下：</p><ul><li>假设数据集中包含自变量a、b</li><li>如果对自变量做多项式二次扩展</li><li>自变量集从两个变量扩展为5个变量(a、b、a_a、b_b、a*b)</li></ul><h2 id="数据挖掘建模"><a href="#数据挖掘建模" class="headerlink" title="数据挖掘建模"></a>数据挖掘建模</h2><h3 id="数据集的划分方法"><a href="#数据集的划分方法" class="headerlink" title="数据集的划分方法"></a>数据集的划分方法</h3><p>训练集：用来训练和拟合模型<br>验证集：当通过训练集训练出多个模型后，使用验证集数据纠偏或比较预测<br>测试集：模型泛化能力的考量。<br>注：有时候数据集只划分两类，将验证集和测试机视为同一个数据集。</p><p><code>数据集划分的基本原则</code></p><ul><li>保持训练集和验证集之间的互斥性</li><li>测试样本尽量不在训练样本中出现，以保证验证集上的表现能代表模型的泛化能力</li></ul><p><code>数据集划分方法</code></p><ul><li><code>留出法</code>：直接将数据集划分成两个互斥的集合，一个做训练集，一个做验证集。常用的划分比例：7:3、7.5:2.5、8:2。若划分三类：6:2:2</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.model_selection import train_test_split</span><br></pre></td></tr></table></figure><ul><li><code>交叉验证法</code>：将数据集划分成k个大小相似的互斥子集，每次把k-1个子集做训练，1个子集做验证，训练k次，最终返回k在、次训练结果的均值。因此交叉验证法又被称为k次交叉法(k-fold)。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.model_selection import KFold</span><br></pre></td></tr></table></figure><h3 id="传统机器学习算法"><a href="#传统机器学习算法" class="headerlink" title="传统机器学习算法"></a>传统机器学习算法</h3><p>传统机器学习算法根据样本集有无标注、是否部分有标注分为三类：监督学习、无监督学习、半监督学习。</p><p>讲算法之前先说明几个概念：<br><code>集成学习</code>：是指组合多个模型、有效提高模型泛化能力的学习策略。  </p><p>| 基础概念 | 适用条件 |<br>| – | – |<br>| 弱可学习 | 多项式学习算法的效果不很明显 |<br>| 强可学习 | 多项式学习算法的效果较为明显 |  </p><p>弱可学习可通过集成方法称为强可学习。<br>集成方法分类：</p><ul><li><code>袋装法</code>(bagging)：指将训练集分别用不同的模型进行训练，这些模型相互独立，然后将结果进行投票取均值的方法。如随机森林。</li><li><code>提升法</code>(boost)：指训练集用一种模型训练出的结果作为另一个模型的输入，然后将其输出再作为其他模型的输入，如此反复。最后把这些模型进行加权叠加作为最终输出。如Adaboost、XGBoost。<ul><li>注意这种方式中，子模型对最终结果的影响更大程度上取决于权值，而不是顺序。</li></ul></li></ul><h4 id="监督学习"><a href="#监督学习" class="headerlink" title="监督学习"></a>监督学习</h4><p>适用于样本集有标注的情况。</p><p>监督学习模型分为<code>分类</code>和<code>回归</code>两类。</p><ul><li>分类适用于标注(标签)是离散的情况</li><li>回归适用于标注是连续数值的情况</li><li>分类和回归没有绝对的划分界限，分类可视为一种有限的回归；回归可视为一种无限定序数据的分类。有些算法都可运用在这两类模型上。</li></ul><p>监督学习使用场景举例：图形识别、房价预测、银行信用评估等</p><p>分类常用模型：KNN、朴素贝叶斯、Adaboost、随机森林<br>回归常用模型：线性回归、回归树和提升树<br>可同时用于分类和回归的模型：决策树、支持向量机(SVM)、Logistic模型、人工神经网络</p><h5 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h5><p>具体的，分类模型也可以分为两种类型：生成模型、判别模型。</p><ul><li><code>生成模型</code>：通过求输入输出的联合概率分布，在求解类别归类的概率。如朴素贝叶斯</li><li><code>判别模型</code>：不通过求联合概率分布，直接可以获得输出最大分类的概率。如KNN</li></ul><p>两者的区别：判别模型较生成模型，对数据的要求低一点，对数据的容忍度大一些，速度相对慢一些，适用范围更广一些。</p><h6 id="KNN"><a href="#KNN" class="headerlink" title="KNN"></a>KNN</h6><p>KNN：K-Nearest Neighbors，最邻近结点算法。<br>算法思想：每个样本都可以用它最接近的K个邻近值来代表。<br>适用条件：用于标注在空间隔离性较好的情况。</p><p>基础知识：</p><ul><li>欧式距离</li><li>曼哈顿距离</li><li>闵可夫斯基距离</li><li>KD-Tree：点作为叶子节点，线作为分枝节点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.neighbors import KNeighborsClassifier  </span><br><span class="line">knn_clf&#x3D; KNeighborsClassifier(n_neighbors&#x3D;5) &#x2F;&#x2F;最近5个点  </span><br><span class="line">knn_clf.fit(X_train,Y_train)  </span><br><span class="line">Y_pred &#x3D; knn_clf.predict(X_validation)</span><br></pre></td></tr></table></figure><h6 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h6><p>朴素：特征间相互独立。<br>算法思想：先通过已给定的训练集，以特征之间独立作为前提假设，学习从输入到输出的联合概率分布，再基于学习到的模型，输入 X 求出使得后验概率最大的输出 Y 。<br>适用条件：特征最好是离散的。</p><p>基础知识：</p><ul><li>概率</li><li>条件概率</li><li>联合概率</li><li>全概率公式</li><li>贝叶斯公式</li><li>拉普拉斯平滑：若条件概率为0，导致整个式子为0，则在所有值都加1.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.naive_bayes import GaussianNB,BernoulliNB  </span><br><span class="line">&#x2F;&#x2F;高斯模贝叶斯，假设特征是高斯分布  </span><br><span class="line">GaussianNB( ).fit( ).predict( )  </span><br><span class="line">&#x2F;&#x2F;伯努利贝叶斯，适用于离散值是二值的情况  </span><br><span class="line">BernoulliNB( ).fit( ).predict( )</span><br></pre></td></tr></table></figure><h6 id="决策树"><a href="#决策树" class="headerlink" title="决策树"></a>决策树</h6><p>算法思想：<br>特征判别先后顺序的依据或评价手段：</p><ul><li>信息增益-ID3：适用于离散值较多的分类问题<ul><li>值越大，该特征越先比较</li></ul></li><li>信息增益率-C4.5：适用于离散值较多的分类问题<ul><li>考虑到了熵本身值大小的影响</li></ul></li><li>Gini系数-CART：不纯度。适用于连续值分类问题<ul><li>不纯度值最低的作当前区分</li></ul></li></ul><p>注意事项：</p><ul><li>连续值切分方法同探索性分析的离散化方法</li><li>规则用尽则投票，哪个样本多投哪个</li><li>若过拟合，需要修建枝叶：<ul><li>前剪枝：构造决策树之前规定每个叶子节点最多有多少个样本，或规定决策树的最大深度</li><li>后剪枝：先构造决策树，然后对样本值比较悬殊的枝叶进行修剪</li></ul></li><li>若想生成图示，需下载app：Graphviz</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.tree import DecisionTreeClassifier  </span><br><span class="line">&#x2F;&#x2F;默认采用Gini系数(不纯度)  </span><br><span class="line">DecisionTreeClassifier( ).fit( ).predict( )  </span><br><span class="line">&#x2F;&#x2F;使用信息增益(ID3)  </span><br><span class="line">DecisionTreeClassifier(criterion&#x3D;&quot;entropy&quot;).fit( ).predict( )</span><br></pre></td></tr></table></figure><h6 id="支持向量机-SVM"><a href="#支持向量机-SVM" class="headerlink" title="支持向量机(SVM)"></a>支持向量机(SVM)</h6><p>SVM: Support Vector Machine</p><p>基础概念：</p><ul><li>高维面</li><li>分界面</li><li>拉格朗日乘数法</li></ul><p>注意事项：</p><ul><li>若一些计算结果为无穷大，可容忍部分错误的分类，转换求 min(max(L)) ;也可利用 KKT 条件，求 max(min(L))</li><li>如需扩维，有两种方式：<ul><li>线映射，在计算。这样容易造成维度灾难。</li><li>先在低维空间计算，在利用核函数扩维<ul><li>常见核函数：线性核函数、多项式核函数、高斯径向基(RBF)核函数</li></ul></li></ul></li><li>若存在少部分异常，可松弛变量，即为了达到更宽的分界线，允许存在少量错分点</li><li>若样本不平衡，根据实际业务场景定</li><li>对于多分类问题：<ul><li>One-Other：有几个分类建几个 SVM ，分成一个分类和其他分类</li><li>One-One：分类的两两之间分别建立 SVN</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.svm import SVC  </span><br><span class="line">SVC(c&#x3D;100000).fit( ).predict( ) &#x2F;&#x2F;c为分类精度，值越大运行时间越长</span><br></pre></td></tr></table></figure><h6 id="Adaboost"><a href="#Adaboost" class="headerlink" title="Adaboost"></a>Adaboost</h6><p>Adaboost：集成方法中提升法的运用。</p><p>特点：精度高，灵活可调，几乎不用担心过拟合，简化特征工程流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.ensemble import AdaboostClassifier  </span><br><span class="line">AdaboostClassifier().fit( ).predict( )</span><br></pre></td></tr></table></figure><h6 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h6><p>随机森林：集成方法中袋装法的运用。由多个决策树集成。</p><p>基本概念：</p><ul><li>树的个数<ul><li>考虑到的样本的局部性的可能情况越多，越容易过拟合</li><li>树的数量与样本数量、特征数量都有关系，不断的尝试后确定</li></ul></li><li>树的特征数<ul><li>特征少时每棵树用全部特征，特征多时每棵树用部分特征</li><li>可增加树的数量和并行计算的能力来平衡特征减少可能带来的损失</li></ul></li><li>树的训练集<ul><li>每棵树的训练集都是模型训练集的一个子集</li><li>选取子集的方法有两种：<ul><li>训练子集和模型训练集数量一样，采用有放回的抽样构成样本差异性</li><li>每棵树都用全部样本，通过缩减特征的规模构成样本的差异性</li></ul></li></ul></li></ul><p>注意事项：</p><ul><li>每个决策树可以不使用全部特征，减少规模和复杂度</li><li>不需要剪枝，即可有效避免过拟合</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.ensemble import RandomForestClassifier  </span><br><span class="line">RandomForestClassifier().fit( ).predict( )</span><br></pre></td></tr></table></figure><h5 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h5><h6 id="线性回归"><a href="#线性回归" class="headerlink" title="线性回归"></a>线性回归</h6><p><code>一元线性回归</code><br>适用条件：适用于线性可分的场景</p><p>基本概念：</p><ul><li>损失函数</li><li>参数优化目标</li><li>最小二乘法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.linear_model import LinearRegression  </span><br><span class="line">&#x2F;&#x2F;线性回归  </span><br><span class="line">LinearRegression().fit( ).predict( )</span><br></pre></td></tr></table></figure><p><code>多元线性回归</code></p><p>基本概念：</p><ul><li>损失函数</li><li>优化目标</li><li>矩阵求解</li><li>惩罚(正则化):通常在模型损失函数中增加一个正则项(惩罚项)来控制模型的复杂度。有两类惩罚项：<ul><li>L1正则系数：Lasso回归</li><li>L2正则系数：ridge回归(岭回归)</li></ul></li></ul><p>求解方法：<code>梯度下降法</code><br>一种无约束多元函数极值求解方法，通过迭代得到最小化的损失函数所对应的模型参数。<br>基本思路：在求解目标函数 E(a) 的最小值时，a 沿梯度下降的方向不断变化求解最小值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.linear_model import Ridge,Lasso  </span><br><span class="line">&#x2F;&#x2F;岭回归  </span><br><span class="line">Ridge(alpha &#x3D; 5).fit( ).predict( ) &#x2F;&#x2F;alpha默认为0  </span><br><span class="line">&#x2F;&#x2F;Lasso回归  </span><br><span class="line">Lasso(alpha &#x3D; ).fit( ).predict( )</span><br></pre></td></tr></table></figure><h6 id="Logistic回归"><a href="#Logistic回归" class="headerlink" title="Logistic回归"></a>Logistic回归</h6><p>基本概念：</p><ul><li>激活函数</li><li>损失函数：对数似然损失函数</li><li>梯度下降</li></ul><p>注意事项：同线性回归，也是求最小值，也可用梯度下降方法求解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.linear_model import LogisticRegression  </span><br><span class="line">LogisticRegression( ).fit( ).predict( ) &#x2F;&#x2F;alpha默认为0</span><br></pre></td></tr></table></figure><h6 id="人工神经网络"><a href="#人工神经网络" class="headerlink" title="人工神经网络"></a>人工神经网络</h6><p>适用条件：适用于各种非线性映射。</p><p>基本概念：</p><ul><li>感知器：处理线性映射关系</li><li>感知器并联</li><li>神经网络：<ul><li>输入层：数据必须归一化；</li><li>隐含层；</li><li>输出层：必须是 one-hot 格式</li></ul></li></ul><p>求解方法：求解所有参数</p><ul><li>梯度下降算法：参数多，很复杂</li><li>反向传播算法(PyBrain)<ul><li>前向计算</li><li>计算误差</li><li>反向单层调整</li><li>传播</li><li>不断迭代，直到输出收敛到误差范围内或迭代固定次数</li></ul></li><li>随机梯度下降算法(SGD,stochastic Gradient Decent)<ul><li>每次调整权值时，选取部分样本进行梯度下降</li><li>优点是收敛更快，计算开销小；缺点是容易陷入局部最优解。</li><li>使用范围广</li></ul></li></ul><p>注意事项：</p><ul><li>人工神经网络的深度加深就形成深度神经网络。</li><li>算法易受离群点影响，易过拟合。解决办法有两种：<ul><li>正则化</li><li>dropout：每次随机选取部分节点，组成多个神经网络模型，将多个结果投票选出得票最多的模型取其值；对于回归模型取其均值。类似与集成方法。</li></ul></li><li>属性特征和结果要在0-1之间，且结果是 one-hot 形式</li><li>输出结果进行 softmax 转化，确保其和为1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python中没有神经网络的包，需要手写。  </span><br><span class="line">&#x2F;&#x2F;步骤一：安装keras  </span><br><span class="line">pip install tensorflow  </span><br><span class="line">conda install pip &#x2F;&#x2F;仅window需要这一步，且已安装 Anconoda  </span><br><span class="line">pip install keras  </span><br><span class="line">&#x2F;&#x2F;步骤二：python中调用keras  </span><br><span class="line">from keras.models import Sequential &#x2F;&#x2F; 类似容器  </span><br><span class="line">from keras.models import Dense,Activation &#x2F;&#x2F;神经网络层，激活函数  </span><br><span class="line">from keras.models import SGD &#x2F;&#x2F;随机梯度下降算法</span><br></pre></td></tr></table></figure><h6 id="回归树和提升树"><a href="#回归树和提升树" class="headerlink" title="回归树和提升树"></a>回归树和提升树</h6><p>回归树：</p><ul><li>与分类树(决策树)的区别：<ul><li>分类树中只需叶子结点有分类的判断值</li><li>回归树中每个节点都有一个预测值，一般来说预测值是连续标注的平均值</li></ul></li><li>回归树的切分方法：<ul><li>切分后两部分的方差和最小。其中一个特征可以使用多次，直到满足回归树的停止条件。</li></ul></li><li>回归树的停止条件有两种：<ul><li>剪枝的限制：<ul><li>树的最大深度</li><li>叶子的最大样本数量</li><li>…</li></ul></li><li>最小方差值</li></ul></li><li>回归树最终取叶子节点的平均值作为预测值。</li></ul><p>提升树：由多棵回归树集成。其中最佳的一种提升树是 <code>GBDT</code> (Gradient boosting Decision)梯度提升决策树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.ensemble import GradientBoostingClassifier  </span><br><span class="line">&#x2F;&#x2F;最佳提升树：梯度提升决策树  </span><br><span class="line">GradientBoostingClassifier(max_depth &#x3D; 6,n_estimators &#x3D; 100 ).fit( ).predict( ) &#x2F;&#x2F;100棵树，每棵树深度为6</span><br></pre></td></tr></table></figure><h4 id="非监督学习"><a href="#非监督学习" class="headerlink" title="非监督学习"></a>非监督学习</h4><p>将集合分成有类似的对象组成的多个类的过程，适用于样本集无标注的情况。</p><p>非监督学习模型分为<code>聚类</code>和<code>关联</code>。</p><ul><li>分类适用于标注(标签)是离散的情况</li><li>回归适用于标注是连续数值的情况</li><li>分类和回归没有绝对的划分界限，分类可视为一种有限的回归；回归可视为一种无限定序数据的分类。有些算法都可运用在这两类模型上。</li></ul><p>非监督学习使用场景举例：App客群分类、词向量转化等</p><p>聚类常用模型：基于切割的k-means、基于层次的聚类、基于密度的DBSCAN、基于图的split<br>关联常用模型：Apriori、Apriori-All</p><h5 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h5><h6 id="k-means"><a href="#k-means" class="headerlink" title="k-means"></a>k-means</h6><p>算法思想：所有类都有一个中心，属于一个类的点到它的中心的距离相比于其他类的中心更近。中心是指质心，距离常用欧式距离。</p><p>实现步骤：</p><ul><li>从n个样本中随机选取k个作为初始化的质心</li><li>对每个样本测量其到每个质心的距离，并把它归到最近的质心的类</li><li>重新计算已经得到的各个类的质心</li><li>迭代第二、三步，直至新的质心与原质心相等或小于阈值，算法结束</li></ul><p>注意事项：</p><ul><li>初始质心位置可能回影响最终结果<ul><li>多试几次，取最稳定的结果</li></ul></li><li>个别离群值会影响整体聚类效果<ul><li>将取质心换成取中心(k-medoids)。k-medoids 中点与其他同类点的距离和最小</li></ul></li><li>必须指定k值<ul><li>其他衡量因子辅助，如轮廓系数、最小误差…</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.cluster import KMeans  </span><br><span class="line">KMeans(n_clusters &#x3D; 2).fit(X) &#x2F;&#x2F;分成两类  </span><br><span class="line">KMeans.labels_.astype(np.int) &#x2F;&#x2F;将聚类后得到的labels转换成int格式  </span><br><span class="line">plt.scatter( ) &#x2F;&#x2F;画散点图</span><br></pre></td></tr></table></figure><h6 id="层次聚类"><a href="#层次聚类" class="headerlink" title="层次聚类"></a>层次聚类</h6><p>算法思想：相近的点尽可能接近。把相近的点视为一个簇，根据分类个数不断迭代。</p><p>距离衡量指标：</p><ul><li>ward距离</li><li>平方残差和：值越小，两个簇越可以合成一个簇</li></ul><p>注意事项：</p><ul><li>层次聚类灵活，但是计算复杂度比较高，离群点影响比较大</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.cluster import AgglomerativeClustering  </span><br><span class="line">AgglomerativeClustering(n_clusters &#x3D; 2,linkage&#x3D;&quot;ward&quot;) &#x2F;&#x2F;分成两类</span><br></pre></td></tr></table></figure><h6 id="DBSCAN"><a href="#DBSCAN" class="headerlink" title="DBSCAN"></a>DBSCAN</h6><p>算法思想：一定区域内，密度达到一定程度才是一个类，否则是离群点。</p><p>基本概念：</p><ul><li>E邻域：给定对象半径为 E 内的区域称为该对象的 E邻域</li><li>核心对象：如果给定对象 E邻域内的样本点大于或等于 MinPts，则称该对象为核心对象</li><li>直接密度可达：对于样本集合 D，如果样本点 q在 p的E邻域内，并且 p为核心对象，那么对象 q从对象 p直接密度可达。</li><li>密度可达：对于样本集合 D，给定一串样本点 p1、p2、…、pn, p = p1, q = pn,假设对象 pi从 pi-1直接密度可达，那么对象 q从对象 p密度可达</li><li>密度相连：存在样本集合 D中的一点 o，如果对象 o到对象 p和对象 q都是密度可达的，那么 p和 q密度相连</li></ul><p>注意事项：</p><ul><li>DBSCAN算法就是找到密度相连对象的最大集合</li><li>DBSCAN算法优点：对离群点不敏感</li><li>缺点：<ul><li>计算相邻两个点之间的点不容易<ul><li>借助 KD-Tree等数据结构的辅助</li></ul></li><li>需要指定两个参数：E 、 MinPts<ul><li>多尝试</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，供参考，具体见官网  </span><br><span class="line">from sklearn.cluster import DBSCAN  </span><br><span class="line">DBSCAN(min_samples &#x3D; 3,eps&#x3D; 5) &#x2F;&#x2F;min_samples：最小点数；eps:E邻域</span><br></pre></td></tr></table></figure><h6 id="图分裂"><a href="#图分裂" class="headerlink" title="图分裂"></a>图分裂</h6><p>实现步骤：</p><ul><li>根据坐标点位置距离关系形成连通图(可采用DBSCAN等算法思路找到最大范围的点数，然后用边连接起来)</li><li>将形成的多个连通图进行逐一分裂</li></ul><p>分类的依据：</p><ul><li>承受系数t</li><li>分裂阈值$\lambda$</li><li>若 t &gt; $\lambda$,则将该组边切分</li></ul><p>注意事项：</p><ul><li>与基于层次的聚类思路相反，是从顶至下</li><li>图建立方式、分裂方式非常灵活</li></ul><h5 id="关联"><a href="#关联" class="headerlink" title="关联"></a>关联</h5><p>基本概念：</p><ul><li>项目：一个字段，对交易来说一般是指一次交易中的一个物品，如：尿布</li><li>事物：某个客户在一次交易中，发生的所有项目的集合，如：{尿布，啤酒}</li><li>项集：包含若干个项目的集合(一次事务中)</li><li>频繁项集：某个项集的支持度大于设定阈值(人为设定或者根据数据分布出经验来定)，即称这个项集为频繁项集</li><li>支持度：项集{x, y}在总项集中出现的频率(support)</li><li>置信度：在先决条件 x发生的条件下，有关联规则{x -&gt; y}推出 y 的概率(Confidence)</li><li>提升度：表示含有 x的条件下同时含有 y的概率，与无论含不含 x都含有 y的概率之比。(Confidence({x} -&gt; {y}) / support({y}))。若提升度大于1，则表示购买 x对购买 y有提升作用。</li></ul><p>注意事项：</p><ul><li>两个频繁项集组成的项集不一定是频繁项集</li><li>两个非频繁项集组成的项集一定不是频繁项集</li><li>一个频繁项集和一个非频繁项集组成的项集一定不是频繁项集</li></ul><p>关联可分为两类：</p><ul><li>关联规则：反映一个事物与其他事物之间的相互依存性和关联性，如Apriori算法</li><li>序列规则：与关联规则相似。不同的是将时间因素考虑进来，剔除关联规则中时间点靠后的项对时间点靠前的项的支持，如Apriori-All算法</li></ul><h6 id="Apriori"><a href="#Apriori" class="headerlink" title="Apriori"></a>Apriori</h6><p>算法思想：先指定支持度的阈值，若一个项集的支持度大于这个阈值，则称其为频繁集，然后找出频繁项集。</p><p>找出频繁集的方法：</p><ul><li>先找出一频繁项集，去掉一非频繁项集</li><li>然后将一频繁项集组成二频繁项集，根据阈值去掉二非频繁项集</li><li>再将一频繁项集和二频繁项集组成三频繁项集，根据阈值去掉三非频繁项集</li><li>以此类推</li><li>直至找出最高阶的频繁项集，所有组合遍历完毕，整理全部项集</li></ul><h6 id="Apriori-All"><a href="#Apriori-All" class="headerlink" title="Apriori-All"></a>Apriori-All</h6><p>适用场景：预测用户在购买某种东西后，下次购买时还会买其他什么东西作为搭配</p><p>实现步骤：</p><ul><li>Forward: Apriori</li><li>Backward: 去掉时间序列之后的项对之前的项的支持</li></ul><p>注意事项：</p><ul><li>sklearn中不支持序列规则，自己写</li></ul><h4 id="半监督学习"><a href="#半监督学习" class="headerlink" title="半监督学习"></a>半监督学习</h4><p>适用于样本集部分有标注，部分无标注的情况。通常无标注样本数量远大于有标注样本的数量。</p><p>原因：获取标注的成本较大；无标注样本可能很容易获得。</p><p>算法思路：</p><ul><li>生成模型思路：先对所有有标注的样本计算出一个分布，然后判别无标注的样本如何标注。也可采用分批迭代的方式，如先将与有标注样本比较近的样本进行标注，然后调整分布，在标注接下来的样本。</li><li>判别模型的思路。也就是指物以类聚，如标签传播算法。</li></ul><p>常用算法：标签传播算法</p><h5 id="标签传播算法"><a href="#标签传播算法" class="headerlink" title="标签传播算法"></a>标签传播算法</h5><p>算法思想：根据没有标注的样本和周围有标注的样本进行相似度比较，相似度高的将其标注为临近的标注。<br>其中传播是指迭代由近及远的过程。相似度判别方法：KNN、RBF等</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;python实现，参数自行查看sklearn官网  </span><br><span class="line">from sklearn.semi_supervised import LabelPropagation  </span><br><span class="line">LabelPropagation( ).fit( ).predict( )</span><br></pre></td></tr></table></figure><h4 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h4><p>暂略</p><hr><h2 id="模型评估方法"><a href="#模型评估方法" class="headerlink" title="模型评估方法"></a>模型评估方法</h2><p>python中用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.metrics import accuracy_score,recall_score,f1_score  </span><br><span class="line">&#x2F;&#x2F;准确率  </span><br><span class="line">print(&quot;ACC&quot;,accuracy_score(Y_validation,Ypred))  </span><br><span class="line">&#x2F;&#x2F;召回率  </span><br><span class="line">print(&quot;REC&quot;,recall_score(Y_validation,Ypred))  </span><br><span class="line">&#x2F;&#x2F;F值  </span><br><span class="line">print(&quot;F_score&quot;,f1_score(Y_validation,Ypred))</span><br></pre></td></tr></table></figure><h3 id="分类模型的常用评价指标"><a href="#分类模型的常用评价指标" class="headerlink" title="分类模型的常用评价指标"></a>分类模型的常用评价指标</h3><h4 id="二分类评价指标"><a href="#二分类评价指标" class="headerlink" title="二分类评价指标"></a>二分类评价指标</h4><p>分正类(1)和负类(0)<br><code>基本指标</code></p><ul><li>误差率：错分类样本占总体样本的比例</li><li>准确率(正确率)(Accuracy Rate)：正确分类样本占总体样本的比例</li></ul><p><code>混淆矩阵</code><br>| 真实情况 | 预测为正例 | 预测为负例<br>| —- | —- | —- |<br>| 正例 | TP(真正例) | FN(假反例) 漏<br>| 负例 | FP(假正例) 错 | TN(真反例)</p><p><code>衍生指标</code></p><ul><li>查准率(precision):所有真正例占所有预测为正的样本的比例</li><li>查全率(招回率,Recall,TPR):所有真正例占所有真实为正的样本的比例</li><li>F-measure(F-score):</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 * Recall * Accuracy &#x2F; (Reacll + Accuracy)</span><br></pre></td></tr></table></figure><ul><li>错误接收率(FPR,False Postive Rate):</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FP &#x2F; (FP + TN)</span><br></pre></td></tr></table></figure><ul><li>错误拒绝率(FRR,False Rejction Rate):</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FN &#x2F; (TP + FN)</span><br></pre></td></tr></table></figure><h4 id="多分类评价指标"><a href="#多分类评价指标" class="headerlink" title="多分类评价指标"></a>多分类评价指标</h4><ul><li>多元混淆矩阵</li><li>准确率：同二分类</li><li>召回率与F值：两种思路处理：<ul><li>先计算所有的TP、FN等值，再以二值方法计算</li><li>分别把每个分类当作正类，各计算一个召回率或F值，然后取加权或不加权的平均值</li></ul></li><li>ROC曲线与AUC值：衡量分类效果，并且可以限定阈值<ul><li>ROC曲线：以召回率(TPR)为纵轴，错误接收率(FPR)为横轴，采用不同的截断点，绘制ROC曲线。ROC曲线能够很容易地查出任意界限值对性能的识别能力。</li><li>AUC值：ROC曲线与坐标轴构成的图形面积。AUC值越接近1，说明越准确。</li></ul></li><li>增益图和KS图：衡量分类效果<ul><li>增益图：宏观上反映分类器的效果</li><li>KS图：反映对正类样本份额例的</li></ul></li></ul><h3 id="回归模型的常用评价指标"><a href="#回归模型的常用评价指标" class="headerlink" title="回归模型的常用评价指标"></a>回归模型的常用评价指标</h3><ul><li>样本误差：衡量模型在一个样本上的预测准确度<ul><li>样本误差 = 样本预测值 - 样本实际值</li></ul></li><li>平均误差方(MSE)：最常用的评价指标<ul><li>所有样本的样本误差的平方和的均值。MSE越接近0，模型越准确。</li></ul></li><li>平均绝对误差(MAE)：较好解释的评价指标<ul><li>所有样本的样本误差的绝对值的均值。MAE的单位与因变量的单位一致，其越接近0，模型越准确。</li></ul></li><li>平均绝对比例误差(MAPE)：平均绝对误差的衍生指标<ul><li>所有样本的样本误差的绝对值占实际值的比例。指标越接近0，模型越准确。</li></ul></li><li>决定系数： R2-score<ul><li>因变量的方差能被自变量解释的程度。指标越接近1，则代表自变量对于因变量的解释程度越高。通常 &gt;0.5 ，就还不错。</li></ul></li></ul><h3 id="聚类模型的常用评价指标"><a href="#聚类模型的常用评价指标" class="headerlink" title="聚类模型的常用评价指标"></a>聚类模型的常用评价指标</h3><ul><li>RMS(Root Mean Square)：值越小，分类效果越好<br>  $$ RMS = \frac{1}{n} \sqrt{\sum_{i=0}^{n} (x_i - \bar{x})^{2}}$$</li><li>轮廓系数<ul><li>a(i)为样本i与簇内其他样本的平均距离，也称为内聚度</li><li>b(i)为样本i与其他某簇样本的平均距离，也称为分离度</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;s(i)越接近1，分类效果越好；越接近-1，分类效果最差  </span><br><span class="line">s(i) &#x3D; (b(i) - a(i)) &#x2F; max&#123;a(i),b(i)&#125;</span><br></pre></td></tr></table></figure><h2 id="关联模型的常用评价指标"><a href="#关联模型的常用评价指标" class="headerlink" title="关联模型的常用评价指标"></a>关联模型的常用评价指标</h2><ul><li>支持度：项集{x, y}在总项集中出现的频率(support)</li><li>置信度：在先决条件 x发生的条件下，有关联规则{x -&gt; y}推出 y 的概率(Confidence)</li><li>提升度：表示含有 x的条件下同时含有 y的概率，与无论含不含 x都含有 y的概率之比。(Confidence({x} -&gt; {y}) / support({y}))。若提升度大于1，则表示购买 x对购买 y有提升作用。</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>python中保存和加载模型的方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from sklearn.externals import joblib  </span><br><span class="line">&#x2F;&#x2F;保存模型  </span><br><span class="line">joblib.dump(knn_clf,&quot;knn_clf&quot;)  </span><br><span class="line">&#x2F;&#x2F;加载模型  </span><br><span class="line">joblib.load(knn_clf,&quot;knn_clf&quot;)</span><br></pre></td></tr></table></figure><h2 id="后续"><a href="#后续" class="headerlink" title="后续"></a>后续</h2><blockquote><p>注：本文持续更新中</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本人是一名数据爱好者，梦想是成为一名数据科学家。这里记录我从零开始的学习过程。内容若有什么不对的，欢迎大家批评指正，也希望能和感兴趣的读者一起探讨。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注1：数据科学家有两条发展路径，一条是偏向业务可视化的商业分析师（数据分析师），一条</summary>
      
    
    
    
    <category term="数据科学" scheme="http://example.com/categories/%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6/"/>
    
    
    <category term="data science" scheme="http://example.com/tags/data-science/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2020/12/29/hello-world/"/>
    <id>http://example.com/2020/12/29/hello-world/</id>
    <published>2020-12-29T07:29:15.000Z</published>
    <updated>2020-12-29T09:56:23.847Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    <category term="未分类" scheme="http://example.com/categories/%E6%9C%AA%E5%88%86%E7%B1%BB/"/>
    
    
    <category term="default" scheme="http://example.com/tags/default/"/>
    
  </entry>
  
  <entry>
    <title>MAC系统下快速利用 GitHub + hexo 搭建个人精美静态博客网站</title>
    <link href="http://example.com/2020/12/29/built-blog/"/>
    <id>http://example.com/2020/12/29/built-blog/</id>
    <published>2020-12-29T07:29:15.000Z</published>
    <updated>2021-01-02T04:19:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者选择 hexo，主要是因为它简单易操作，有很多现存精美主题；选择keep模版主要是因为有搜索功能，万物皆可搜索，其主题简洁大方又五脏俱全。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">必要工具：GitHub、Git、Node.js、hexo;</span><br><span class="line">非必要工具：Vusual Studio Code;</span><br><span class="line">环境：macOS Big Sur 11.1; git 2.29.2; node 14.4.0;</span><br></pre></td></tr></table></figure><p><a class="link" href="https://aishuohuadebenrenyi.github.io/">这里有个实际效果<i class="fas fa-external-link-alt"></i></a></p><h2 id="注册GitHub账号及新建仓库"><a href="#注册GitHub账号及新建仓库" class="headerlink" title="注册GitHub账号及新建仓库"></a>注册GitHub账号及新建仓库</h2><h3 id="注册-GitHub-账号"><a href="#注册-GitHub-账号" class="headerlink" title="注册 GitHub 账号"></a>注册 GitHub 账号</h3><p><a class="link" href="https://github.com/">点此进入官网进行注册<i class="fas fa-external-link-alt"></i></a></p><h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p><img src="/2020/12/29/built-blog/new-repository.png" alt="new-epository1" title="新建仓库"><br><img src="/2020/12/29/built-blog/new-repository2.png" title="填写信息"></p><h2 id="搭建博客框架"><a href="#搭建博客框架" class="headerlink" title="搭建博客框架"></a>搭建博客框架</h2><h3 id="安装Git、Node-js"><a href="#安装Git、Node-js" class="headerlink" title="安装Git、Node.js"></a>安装Git、Node.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 首先检查是否已安装git和node.js</span><br><span class="line"># 终端输入一下命令</span><br><span class="line">node -v #若出现版本信息，说明已安装</span><br><span class="line">git --version #若出现版本信息，说明已安装</span><br><span class="line"># 如果没有安装，则进行安装,都可以通过直接下载安装测序进行安装，这里不演示，提供下载网址：</span><br><span class="line">[git]: https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;git-osx-installer&#x2F;</span><br><span class="line">[node.js]: https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;</span><br></pre></td></tr></table></figure><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="搭建博客并初始化"><a href="#搭建博客并初始化" class="headerlink" title="搭建博客并初始化"></a>搭建博客并初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 在任意目录下创建一个blog文件夹</span><br><span class="line">mkdir blog</span><br><span class="line"># 进入目录</span><br><span class="line">cd blog</span><br><span class="line"># 初始化目录</span><br><span class="line">hexo init</span><br><span class="line">开启本地服务 </span><br><span class="line"># hexo s</span><br></pre></td></tr></table></figure><p>若出现红框中的网址，说明本地启动成功，可以在浏览器中输入该网址查看效果<br><img src="/2020/12/29/built-blog/initialize-blog.png" alt="初始化"></p><h3 id="博客关联到-GitHub-仓库"><a href="#博客关联到-GitHub-仓库" class="headerlink" title="博客关联到 GitHub 仓库"></a>博客关联到 GitHub 仓库</h3><ol><li><p>编辑博客的主要配置文件：config.yml<br>只需要将红框中repo替换成你的username就可以<br><img src="/2020/12/29/built-blog/modify-setting1.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https:&#x2F;&#x2F;github.com&#x2F;aishuohuadebenrenyi&#x2F;aishuohuadebenrenyi.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></li><li><p>在目录中执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 产生静态网页</span><br><span class="line">hexo g</span><br><span class="line"># 部署到GitHub page上</span><br><span class="line">hexo d</span><br><span class="line"># 注：上面两个命令会经常使用，可简写为：</span><br><span class="line">hexo g -d</span><br><span class="line"># 注：如果执行 hexo d 后提示 ERROR Deployer not found: git，则执行下列命令</span><br><span class="line">npm install --save hexo-deployer-git</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>然后需要输入你的GitHub账号和密码即可。</p></li><li><p>关联GitHub账号，免密提交（可选步骤）<br>为了避免每次部署都需要输入账号密码，有一个一劳永逸的办法：生成密钥提交到<br>GitHub,具体方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 用你注册GitHub时的邮箱号，进行秘钥生成</span><br><span class="line">cd ~</span><br><span class="line">ssh-keygen -t rsa -C &quot;xxxxxxx@qq.com&quot;</span><br><span class="line"># 系统就会生成一个隐藏文件夹.ssh</span><br><span class="line">cd .ssh</span><br><span class="line">ls</span><br><span class="line"># 复制公钥</span><br><span class="line">vim id_rsa.pub</span><br></pre></td></tr></table></figure><p>然后在GitHub中操作<br><img src="/2020/12/29/built-blog/ssh1.png"><br><img src="/2020/12/29/built-blog/ssh2.png"><br><img src="/2020/12/29/built-blog/ssh3.png"></p></li></ol><p>注：如果提交失败，可能是vim打开文件复制的格式问题，就把id_rsa.pub中内容复制到其他地方（如text）,再复制粘贴提交。</p><p>至此已搭建好一个简易博客。</p><h3 id="博客基本使用"><a href="#博客基本使用" class="headerlink" title="博客基本使用"></a>博客基本使用</h3><ol><li>创建新的文章<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 新建一个markdown文件</span><br><span class="line">hexo new &quot;built-blog&quot; # 双引号中是文件名，任意取</span><br></pre></td></tr></table></figure>如果要在markdown中插入图片，我比较喜欢的方式如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改博客根目录下的_config.yml文件</span><br><span class="line">post_asset_folder: true</span><br><span class="line"># 安装一个可以上传本地图片的插件</span><br><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save</span><br><span class="line"># 修改后再执行 </span><br><span class="line">hexo new &quot;built-blog&quot;</span><br><span class="line"># 在source&#x2F;_posts中会生成文章built-blog.md和同名文件夹built-blog。将图片资源放在built-blog中，文章就可以使用相对路径引用图片资源了。</span><br></pre></td></tr></table></figure><p>你也可以将所有的图片放在一个文件下，或使用CDN通过URL地址引用，具体方法这里不再赘述。</p><ol start="2"><li>编辑markdown文件<br>可以使用markdown神器 typora， 也可以使用VS Code。<br>这里使用 VS Code。推荐两个插件<ul><li>Markdown All in One<br>有在Vscode中编写Markdown所需的一切（键盘快捷键，目录，自动预览等）</li><li>Markdown Preview Github Styling Custom<br>预览效果和 GitHub page 一样，博客就是GitHub page 搭建，真正的所见及所得。</li></ul></li></ol><p><img src="/2020/12/29/built-blog/edit-blog-content.png" alt="编辑文"></p><ol start="3"><li>发布文章至博客<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g -d</span><br></pre></td></tr></table></figure><h2 id="博客美化及功能完善"><a href="#博客美化及功能完善" class="headerlink" title="博客美化及功能完善"></a>博客美化及功能完善</h2></li></ol><h3 id="主题选择"><a href="#主题选择" class="headerlink" title="主题选择"></a>主题选择</h3><p>Hexo官网：<a class="link" href="https://hexo.io/themes/">https://hexo.io/themes/<i class="fas fa-external-link-alt"></i></a><br>这里选择keep，项目地址 <a class="link" href="https://github.com/XPoet/hexo-theme-keep">https://github.com/XPoet/hexo-theme-keep<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 按照提示操作</span><br><span class="line">$ cd blog</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;XPoet&#x2F;hexo-theme-keep themes&#x2F;keep</span><br><span class="line"># 修改配置文件 _config.yml</span><br><span class="line">theme: keep</span><br></pre></td></tr></table></figure><p><img src="/2020/12/29/built-blog/modify-theme.png"></p><p>至此已搭建好keep风格的博客。里面没有搜索(search)、分类(categories)、标签(tags)等功能，按照<a class="link" href="https://keep.xpoet.cn/2020/11/Keep-%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/">keep官方操作指南<i class="fas fa-external-link-alt"></i></a>操作即可，简单易懂，此处不再赘述。</p><p>若有什么问题，欢迎探讨。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;作者选择 hexo，主要是因为它简单易操作，有很多现存精美主题；选择keep模版主要是因为有搜索功能，万物皆可搜索，其主题简洁大方又五脏俱全。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    <category term="教程" scheme="http://example.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="GitHub" scheme="http://example.com/tags/GitHub/"/>
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
    <category term="Mac" scheme="http://example.com/tags/Mac/"/>
    
  </entry>
  
</feed>
